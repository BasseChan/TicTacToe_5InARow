//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/MyInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputActions"",
    ""maps"": [
        {
            ""name"": ""PersonAMap"",
            ""id"": ""80744757-dbda-4e17-930b-f51fed975cd5"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""d2c15fac-e793-4131-b2a8-a55f104f088d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""262a32c9-13bd-4ed6-8e88-fd36c1489095"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PersonAMap
        m_PersonAMap = asset.FindActionMap("PersonAMap", throwIfNotFound: true);
        m_PersonAMap_Restart = m_PersonAMap.FindAction("Restart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PersonAMap
    private readonly InputActionMap m_PersonAMap;
    private List<IPersonAMapActions> m_PersonAMapActionsCallbackInterfaces = new List<IPersonAMapActions>();
    private readonly InputAction m_PersonAMap_Restart;
    public struct PersonAMapActions
    {
        private @MyInputActions m_Wrapper;
        public PersonAMapActions(@MyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_PersonAMap_Restart;
        public InputActionMap Get() { return m_Wrapper.m_PersonAMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PersonAMapActions set) { return set.Get(); }
        public void AddCallbacks(IPersonAMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PersonAMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PersonAMapActionsCallbackInterfaces.Add(instance);
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
        }

        private void UnregisterCallbacks(IPersonAMapActions instance)
        {
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
        }

        public void RemoveCallbacks(IPersonAMapActions instance)
        {
            if (m_Wrapper.m_PersonAMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPersonAMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PersonAMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PersonAMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PersonAMapActions @PersonAMap => new PersonAMapActions(this);
    public interface IPersonAMapActions
    {
        void OnRestart(InputAction.CallbackContext context);
    }
}
